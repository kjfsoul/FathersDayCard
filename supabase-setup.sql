-- Father's Day Arcade Database Schema
-- Run this in your Supabase SQL editor

-- Users table for authentication and subscription tracking
CREATE TABLE IF NOT EXISTS users (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  stripe_customer_id TEXT UNIQUE,
  stripe_subscription_id TEXT UNIQUE,
  subscription_status TEXT DEFAULT 'free' CHECK (subscription_status IN ('free', 'active', 'canceled', 'past_due')),
  cards_generated INTEGER DEFAULT 0,
  games_played INTEGER DEFAULT 0,
  total_score INTEGER DEFAULT 0
);

-- Father's Day cards generated by users
CREATE TABLE IF NOT EXISTS father_cards (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  dad_name TEXT NOT NULL,
  dad_info JSONB NOT NULL, -- stores questionnaire responses
  card_content JSONB NOT NULL, -- stores AI-generated card
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  view_count INTEGER DEFAULT 0
);

-- Game sessions and scores
CREATE TABLE IF NOT EXISTS game_sessions (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  game_type TEXT NOT NULL CHECK (game_type IN ('emoji-match', 'emoji-memory', 'trivia', 'catch-ball')),
  score INTEGER NOT NULL DEFAULT 0,
  duration_seconds INTEGER,
  completed BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Analytics for usage tracking
CREATE TABLE IF NOT EXISTS analytics (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES users(id) ON DELETE SET NULL,
  event_type TEXT NOT NULL,
  event_data JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Trivia questions for the trivia game
CREATE TABLE IF NOT EXISTS trivia_questions (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  category TEXT NOT NULL DEFAULT 'general',
  question TEXT NOT NULL,
  correct_answer TEXT NOT NULL,
  incorrect_answers TEXT[] NOT NULL,
  difficulty TEXT DEFAULT 'medium' CHECK (difficulty IN ('easy', 'medium', 'hard')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Insert some sample trivia questions
INSERT INTO trivia_questions (category, question, correct_answer, incorrect_answers, difficulty) VALUES
('dad', 'What is traditionally considered the best gift for Father''s Day?', 'Time spent together', ARRAY['Expensive watch', 'New car', 'Golf clubs'], 'easy'),
('dad', 'When is Father''s Day celebrated in the United States?', 'Third Sunday in June', ARRAY['First Sunday in June', 'Second Sunday in May', 'Last Sunday in June'], 'medium'),
('general', 'What does "www" stand for in a website address?', 'World Wide Web', ARRAY['World Wide Window', 'Web Wide World', 'Wide World Web'], 'easy'),
('sports', 'How many players are on a basketball team on the court at one time?', '5', ARRAY['6', '7', '4'], 'easy'),
('dad', 'What percentage of Father''s Day cards are bought by children under 18?', '50%', ARRAY['25%', '75%', '90%'], 'hard');

-- Function to get random trivia question by category
CREATE OR REPLACE FUNCTION get_random_trivia(category_filter TEXT DEFAULT 'general')
RETURNS TABLE (
  id UUID,
  category TEXT,
  question TEXT,
  correct_answer TEXT,
  incorrect_answers TEXT[],
  difficulty TEXT
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    tq.id,
    tq.category,
    tq.question,
    tq.correct_answer,
    tq.incorrect_answers,
    tq.difficulty
  FROM trivia_questions tq
  WHERE tq.category = category_filter OR category_filter = 'all'
  ORDER BY RANDOM()
  LIMIT 1;
END;
$$ LANGUAGE plpgsql;

-- Row Level Security (RLS) policies
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE father_cards ENABLE ROW LEVEL SECURITY;
ALTER TABLE game_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE analytics ENABLE ROW LEVEL SECURITY;

-- Users can only see their own data
CREATE POLICY "Users can view own data" ON users FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can update own data" ON users FOR UPDATE USING (auth.uid() = id);

-- Cards are private to the user who created them
CREATE POLICY "Users can view own cards" ON father_cards FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can create cards" ON father_cards FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update own cards" ON father_cards FOR UPDATE USING (auth.uid() = user_id);

-- Game sessions are private to the user
CREATE POLICY "Users can view own game sessions" ON game_sessions FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can create game sessions" ON game_sessions FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Analytics can be inserted by anyone (for anonymous tracking)
CREATE POLICY "Anyone can insert analytics" ON analytics FOR INSERT WITH CHECK (true);
CREATE POLICY "Users can view own analytics" ON analytics FOR SELECT USING (auth.uid() = user_id OR user_id IS NULL);

-- Trivia questions are public for reading
CREATE POLICY "Anyone can view trivia" ON trivia_questions FOR SELECT USING (true);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_stripe_customer ON users(stripe_customer_id);
CREATE INDEX IF NOT EXISTS idx_father_cards_user ON father_cards(user_id);
CREATE INDEX IF NOT EXISTS idx_game_sessions_user ON game_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_game_sessions_type ON game_sessions(game_type);
CREATE INDEX IF NOT EXISTS idx_analytics_event_type ON analytics(event_type);
CREATE INDEX IF NOT EXISTS idx_analytics_created_at ON analytics(created_at);